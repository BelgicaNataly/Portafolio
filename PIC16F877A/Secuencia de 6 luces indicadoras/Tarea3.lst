CCS PCM C Compiler, Version 5.015, 5967               19-dic.-22 18:36

               Filename:   C:\Users\USUARIO\Documents\Microcontroladores\Tarea3\Tarea3.lst

               ROM used:   270 words (3%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses xt, nowdt 
.................... #use delay(clock=20MHZ) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
....................  
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  FF
001C:  MOVWF  20
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
.................... { 
....................    // Variables   
....................    int entrada; 
....................     
....................    //Configuracion del microcontrolador 
....................    set_tris_a(0b111111); 
0025:  MOVLW  3F
0026:  MOVWF  05
....................    //set_tris_b(0b00000000); 
....................    set_tris_c(0b00000000); 
0027:  MOVLW  00
0028:  MOVWF  07
0029:  BCF    03.5
002A:  MOVWF  20
....................    set_tris_d(0b00000000); 
002B:  BSF    03.5
002C:  MOVWF  08
....................    //output_b(0X00); 
....................    output_c(0X00); 
002D:  BCF    03.5
002E:  MOVWF  20
002F:  BSF    03.5
0030:  CLRF   07
0031:  BCF    03.5
0032:  CLRF   07
....................    output_d(0X00); 
0033:  BSF    03.5
0034:  CLRF   08
0035:  BCF    03.5
0036:  CLRF   08
....................  
....................    //Programa o proceso 
....................    while(true) 
....................    { 
....................      entrada=input(PIN_A4); 
0037:  BSF    03.5
0038:  BSF    05.4
0039:  BCF    03.5
003A:  CLRF   21
003B:  BTFSC  05.4
003C:  INCF   21,F
....................      if(entrada==1) 
003D:  DECFSZ 21,W
003E:  GOTO   0A6
....................      {          
....................        output_d(0X80); 
003F:  BSF    03.5
0040:  CLRF   08
0041:  MOVLW  80
0042:  BCF    03.5
0043:  MOVWF  08
....................        delay_ms(50); 
0044:  MOVLW  32
0045:  MOVWF  22
0046:  CALL   004
....................        output_d(0X00); 
0047:  BSF    03.5
0048:  CLRF   08
0049:  BCF    03.5
004A:  CLRF   08
....................        delay_ms(50); 
004B:  MOVLW  32
004C:  MOVWF  22
004D:  CALL   004
....................        output_d(0X10); 
004E:  BSF    03.5
004F:  CLRF   08
0050:  MOVLW  10
0051:  BCF    03.5
0052:  MOVWF  08
....................        delay_ms(50); 
0053:  MOVLW  32
0054:  MOVWF  22
0055:  CALL   004
....................        output_d(0X00); 
0056:  BSF    03.5
0057:  CLRF   08
0058:  BCF    03.5
0059:  CLRF   08
....................        delay_ms(50); 
005A:  MOVLW  32
005B:  MOVWF  22
005C:  CALL   004
....................        output_c(0X80); 
005D:  MOVLW  00
005E:  MOVWF  20
005F:  BSF    03.5
0060:  CLRF   07
0061:  MOVLW  80
0062:  BCF    03.5
0063:  MOVWF  07
....................        delay_ms(50); 
0064:  MOVLW  32
0065:  MOVWF  22
0066:  CALL   004
....................        output_c(0X00); 
0067:  MOVLW  00
0068:  MOVWF  20
0069:  BSF    03.5
006A:  CLRF   07
006B:  BCF    03.5
006C:  CLRF   07
....................        delay_ms(50); 
006D:  MOVLW  32
006E:  MOVWF  22
006F:  CALL   004
....................        output_c(0X20); 
0070:  MOVLW  00
0071:  MOVWF  20
0072:  BSF    03.5
0073:  CLRF   07
0074:  MOVLW  20
0075:  BCF    03.5
0076:  MOVWF  07
....................        delay_ms(50); 
0077:  MOVLW  32
0078:  MOVWF  22
0079:  CALL   004
....................        output_c(0X00); 
007A:  MOVLW  00
007B:  MOVWF  20
007C:  BSF    03.5
007D:  CLRF   07
007E:  BCF    03.5
007F:  CLRF   07
....................        delay_ms(50); 
0080:  MOVLW  32
0081:  MOVWF  22
0082:  CALL   004
....................        output_c(0X10); 
0083:  MOVLW  00
0084:  MOVWF  20
0085:  BSF    03.5
0086:  CLRF   07
0087:  MOVLW  10
0088:  BCF    03.5
0089:  MOVWF  07
....................        delay_ms(50); 
008A:  MOVLW  32
008B:  MOVWF  22
008C:  CALL   004
....................        output_c(0X00); 
008D:  MOVLW  00
008E:  MOVWF  20
008F:  BSF    03.5
0090:  CLRF   07
0091:  BCF    03.5
0092:  CLRF   07
....................        delay_ms(50); 
0093:  MOVLW  32
0094:  MOVWF  22
0095:  CALL   004
....................        output_d(0X04); 
0096:  BSF    03.5
0097:  CLRF   08
0098:  MOVLW  04
0099:  BCF    03.5
009A:  MOVWF  08
....................        delay_ms(50); 
009B:  MOVLW  32
009C:  MOVWF  22
009D:  CALL   004
....................        output_d(0X00); 
009E:  BSF    03.5
009F:  CLRF   08
00A0:  BCF    03.5
00A1:  CLRF   08
....................        delay_ms(50); 
00A2:  MOVLW  32
00A3:  MOVWF  22
00A4:  CALL   004
....................      } 
00A5:  GOTO   10C
....................      else   
....................      { 
....................        output_d(0X80); 
00A6:  BSF    03.5
00A7:  CLRF   08
00A8:  MOVLW  80
00A9:  BCF    03.5
00AA:  MOVWF  08
....................        delay_ms(50); 
00AB:  MOVLW  32
00AC:  MOVWF  22
00AD:  CALL   004
....................        output_d(0X00); 
00AE:  BSF    03.5
00AF:  CLRF   08
00B0:  BCF    03.5
00B1:  CLRF   08
....................        delay_ms(50);       
00B2:  MOVLW  32
00B3:  MOVWF  22
00B4:  CALL   004
....................        output_c(0X80); 
00B5:  MOVLW  00
00B6:  MOVWF  20
00B7:  BSF    03.5
00B8:  CLRF   07
00B9:  MOVLW  80
00BA:  BCF    03.5
00BB:  MOVWF  07
....................        delay_ms(50); 
00BC:  MOVLW  32
00BD:  MOVWF  22
00BE:  CALL   004
....................        output_c(0X00); 
00BF:  MOVLW  00
00C0:  MOVWF  20
00C1:  BSF    03.5
00C2:  CLRF   07
00C3:  BCF    03.5
00C4:  CLRF   07
....................        delay_ms(50);       
00C5:  MOVLW  32
00C6:  MOVWF  22
00C7:  CALL   004
....................        output_c(0X10); 
00C8:  MOVLW  00
00C9:  MOVWF  20
00CA:  BSF    03.5
00CB:  CLRF   07
00CC:  MOVLW  10
00CD:  BCF    03.5
00CE:  MOVWF  07
....................        delay_ms(50); 
00CF:  MOVLW  32
00D0:  MOVWF  22
00D1:  CALL   004
....................        output_c(0X00); 
00D2:  MOVLW  00
00D3:  MOVWF  20
00D4:  BSF    03.5
00D5:  CLRF   07
00D6:  BCF    03.5
00D7:  CLRF   07
....................        delay_ms(50); 
00D8:  MOVLW  32
00D9:  MOVWF  22
00DA:  CALL   004
....................        output_d(0X10); 
00DB:  BSF    03.5
00DC:  CLRF   08
00DD:  MOVLW  10
00DE:  BCF    03.5
00DF:  MOVWF  08
....................        delay_ms(50); 
00E0:  MOVLW  32
00E1:  MOVWF  22
00E2:  CALL   004
....................        output_d(0X00); 
00E3:  BSF    03.5
00E4:  CLRF   08
00E5:  BCF    03.5
00E6:  CLRF   08
....................        delay_ms(50); 
00E7:  MOVLW  32
00E8:  MOVWF  22
00E9:  CALL   004
....................        output_c(0X20); 
00EA:  MOVLW  00
00EB:  MOVWF  20
00EC:  BSF    03.5
00ED:  CLRF   07
00EE:  MOVLW  20
00EF:  BCF    03.5
00F0:  MOVWF  07
....................        delay_ms(50); 
00F1:  MOVLW  32
00F2:  MOVWF  22
00F3:  CALL   004
....................        output_c(0X00); 
00F4:  MOVLW  00
00F5:  MOVWF  20
00F6:  BSF    03.5
00F7:  CLRF   07
00F8:  BCF    03.5
00F9:  CLRF   07
....................        delay_ms(50); 
00FA:  MOVLW  32
00FB:  MOVWF  22
00FC:  CALL   004
....................        output_d(0X04); 
00FD:  BSF    03.5
00FE:  CLRF   08
00FF:  MOVLW  04
0100:  BCF    03.5
0101:  MOVWF  08
....................        delay_ms(50); 
0102:  MOVLW  32
0103:  MOVWF  22
0104:  CALL   004
....................        output_d(0X00); 
0105:  BSF    03.5
0106:  CLRF   08
0107:  BCF    03.5
0108:  CLRF   08
....................        delay_ms(50); 
0109:  MOVLW  32
010A:  MOVWF  22
010B:  CALL   004
....................      } 
010C:  GOTO   037
....................    } 
.................... } 
010D:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
